[   
    {
        "title": "The Earthquake Report",
        "description": "Website that collects the latest earthquakes reported by the USGS",
        "full": ["Backend built with Ruby on Rails, where it collects information from the last 30 days and stores it in a PostgreSQL DB with a task.","There are 3 additional endpoints:","GET: /getEarthquakes gets earthquakes depending on the given parameters like page number and number of earthquakes per page.","POST: /postComment saves the user's comment in the DB.","GET: /getComment/ gets comments from the DB depending on the earthquake id.","Frontend built with React and Bootstrap, showing earthquake information and allowing comments on each of them.","It's responsive and can be viewed on any large screen device up to 768px in card format, and on mobile versions in swipe format like Tinder.","The website is deployed on Vercel for the front end and on Render for the back end. Please note that Render shuts down servers if they don't receive requests for a certain time, but reconnects upon receiving one, so it may take a while to load when you want to see it live!","Back and Front repository available on Github."],
        "type": "challenge",
        "deploy": "https://quakeschallenge.vercel.app/"
    },
    {
        "title": "Salesland Disociar",
        "description": "Backend built for a technical test for Salesland Peru company.",
        "full": ["The backend receives via a POST request to receive a lead, which enters a table completely to fill the record.","When the previous record is saved successfully, a new method is responsible for dissociating the lead and moving it to another table, where, at the Challenger's request, it must meet certain parameters.","When the record is moved to this new table, it is deleted from the main table and only remains in the dissociated table.","Node.js, Express, and Sequelize were used for database connection to PostgreSQL.","The endpoint verifies that the object sent meets the necessary parameters to be saved in the main table. If not, it responds with an error message indicating all the errors found.","If a duplicate lead is found, it will still be inserted but will return a message indicating that the lead is duplicated and indicating the lead number that is duplicated.","Repository available on Github."],     
        "type": "challenge",
        "deploy": "https://github.com/gunminiho/salesland"
    },
    {
        "title": "Flexworks",
        "description": "Final project: job board for remote jobs in Latam which is live now.",
        "full": ["Website offering a wide number of available jobs for a range of diverse professions, where each one applies to the one that suits them, and the responsible company is in charge of finding the best match.","It is designed to offer temporary jobs of short to medium duration.","The backend is developed with Node.js, Sequelize, Express, and PostgreSQL.","OAuth and JWT were used for authentication.","The Frontend is built with React, TailwindCSS, MaterialUI, and Redux Toolkit.","The repo can be found on my Github, which belongs to the MVP developed by our SoyHenry group.","You can find the mention they make of our work at this link: https://www.linkedin.com/posts/flexwork-latam_henryprojects-henryprojects2023-activity-7142707532522803200-N4uZ"],
        "type": "business",
        "deploy": "https://www.flexworklatam.com/"
    },
    {
        "title": "The Doggy Explorer",
        "description": "First project for my web development class.",
        "full": ["Website created as an individual project for my web development class.","The website collects all dog breeds coming from an API (https://api.thedogapi.com/v1/breeds).","Information can be filtered by breed, by origin, and sorted alphabetically, by breed weight. It was worked in card format.","The detail of each breed can be seen by entering the specific card.","You can enter your own customized dog into the database to be queried later.","Node.js, Express, Sequelize, and PostgreSQL were used for the backend.","React and module.css were used for the Frontend.","Cloudinary was used to store the images.","Repository available on Github."],
        "type": "self",
        "deploy": "https://github.com/gunminiho/Dogs-PI"
    }
]
